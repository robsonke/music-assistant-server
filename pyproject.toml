[project]
name = "music_assistant"
# The version is set by GH action on release
authors = [
  {name = "The Music Assistant Authors", email = "marcelveldt@users.noreply.github.com"},
]
classifiers = [
  "Environment :: Console",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "aiodns>=3.2.0",
  "Brotli>=1.0.9",
  "aiohttp==3.11.18",
  "aiohttp-fast-zlib==0.2.3",
  "aiofiles==24.1.0",
  "aiorun==2025.1.1",
  "aiosqlite==0.21.0",
  "certifi==2025.1.31",
  "colorlog==6.9.0",
  "cryptography==44.0.2",
  "faust-cchardet>=2.1.18",
  "ifaddr==0.2.0",
  "mashumaro==3.15",
  "music-assistant-frontend==2.15.0",
  "music-assistant-models==1.1.45",
  "mutagen==1.47.0",
  "orjson==3.10.16",
  "pillow==11.2.1",
  "podcastparser==0.6.10",
  "python-slugify==8.0.4",
  "unidecode==1.4.0",
  "xmltodict==0.14.2",
  "shortuuid==1.0.13",
  "zeroconf==0.146.5",
]
description = "Music Assistant"
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.12"
version = "0.0.0"

[project.optional-dependencies]
test = [
  "codespell==2.4.1",
  "isort==6.0.1",
  "mypy==1.15.0",
  "pre-commit==4.2.0",
  "pre-commit-hooks==5.0.0",
  "pytest==8.3.5",
  "pytest-aiohttp==1.1.0",
  "pytest-cov==6.1.1",
  "syrupy==4.9.1",
  "tomli==2.2.1",
  "ruff==0.11.7",
]

[project.scripts]
mass = "music_assistant.__main__:main"

[tool.codespell]
# explicit is misspelled in the iTunes API
ignore-words-list = "provid,hass,followings,childs,explict"
skip = """*.js,*.svg,\
music_assistant/providers/itunes_podcasts/itunes_country_codes.json,\
"""

[tool.setuptools]
include-package-data = true
packages = ["music_assistant"]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
music_assistant = ["py.typed"]

[tool.ruff]
fix = true
show-fixes = true

line-length = 100
target-version = "py312"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.ruff.lint.pylint]

max-args = 10
max-branches = 25
max-returns = 15
max-statements = 50

[tool.mypy]
platform = "linux"
python_version = "3.12"

# set this to normal when we have fixed all exclusions
follow_imports = "silent"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disable_error_code = [
  "annotation-unchecked",
  "import-not-found",
  "import-untyped",
]
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
enable_error_code = [
  "ignore-without-code",
  "redundant-self",
  "truthy-iterable",
]
exclude = [
  '^music_assistant/controllers/.*$',
  '^music_assistant/helpers/.*$',
  '^music_assistant/models/.*$',
  '^music_assistant/providers/apple_music/.*$',
  '^music_assistant/providers/bluesound/.*$',
  '^music_assistant/providers/chromecast/.*$',
  '^music_assistant/providers/deezer/.*$',
  '^music_assistant/providers/dlna/.*$',
  '^music_assistant/providers/hass_players/.*$',
  '^music_assistant/providers/player_group/.*$',
  '^music_assistant/providers/qobuz/.*$',
  '^music_assistant/providers/siriusxm/.*$',
  '^music_assistant/providers/squeezelite/.*$',
  '^music_assistant/providers/sonos/.*$',
  '^music_assistant/providers/soundcloud/.*$',
  '^music_assistant/providers/snapcast/.*$',
  '^music_assistant/providers/spotify/.*$',
  '^music_assistant/providers/tunein/.*$',
  '^music_assistant/providers/ytmusic/.*$',
]
extra_checks = false
local_partial_types = true
no_implicit_optional = true
no_implicit_reexport = true
packages = [
  "tests",
  "music_assistant",
]
show_error_codes = true
strict_equality = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff.format]
# Force Linux/macOS line endings
line-ending = "lf"

[tool.pytest.ini_options]
addopts = "--cov music_assistant"
asyncio_mode = "auto"

[tool.ruff.lint]
ignore = [
  "ANN002", # Just annoying, not really useful
  "ANN003", # Just annoying, not really useful
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "EM101", # Just annoying, not really useful
  "EM102", # Just annoying, not really useful
  "FIX002", # Just annoying, not really useful
  "PLR2004", # Just annoying, not really useful
  "PGH004", # Just annoying, not really useful
  "PD011", # Just annoying, not really useful
  "S101", # assert is often used to satisfy type checking
  "TC001", # Just annoying, not really useful
  "TC003", # Just annoying, not really useful
  "TD002", # Just annoying, not really useful
  "TD003", # Just annoying, not really useful
  "TD004", # Just annoying, not really useful
  "TRY003", # Just annoying, not really useful
  "TRY400", # Just annoying, not really useful
  "COM812", # Conflicts with the Ruff formatter
  "ISC001", # TEMPORARY DISABLED rules  # The below rules must be enabled later one-by-one !
  "BLE001",
  "FBT001",
  "FBT002",
  "FBT003",
  "ANN001",
  "ANN201",
  "ANN202",
  "TRY002",
  "PTH103",
  "PTH100",
  "PTH110",
  "PTH111",
  "PTH112",
  "PTH113",
  "PTH118",
  "PTH120",
  "PTH123",
  "PYI034",
  "PYI036",
  "G004",
  "PGH003",
  "DTZ005",
  "S104",
  "S105",
  "S106",
  "SLF001",
  "SIM113",
  "SIM102",
  "PERF401",
  "PERF402",
  "ARG002",
  "S311",
  "TRY301",
  "RET505",
  "PLR0912",
  "B904",
  "TRY401",
  "S324",
  "DTZ006",
  "ERA001",
  "PTH206",
  "C901",
  "PTH119",
  "PTH116",
  "DTZ003",
  "RUF012",
  "S304",
  "DTZ003",
  "RET507",
  "RUF006",
  "TRY300",
  "PTH107",
  "S608",
  "N818",
  "S307",
  "B007",
  "RUF009",
  "ANN204",
  "PTH202",
  "ASYNC109",
  "ASYNC110",
  "A005",
]

select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["music_assistant"]

[tool.ruff.lint.mccabe]
max-complexity = 25
